{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import{Table,Header,Segment,Label}from'semantic-ui-react';export default function ResultsTable2(_ref){var currencyoutputtable=_ref.currencyoutputtable;var rows=currencyoutputtable.map(function(result,index){var color='blue';return/*#__PURE__*/_jsxs(Table.Row,{children:[/*#__PURE__*/_jsx(Table.Cell,{children:/*#__PURE__*/_jsx(Label,{ribbon:true,color:color,children:index+1})}),/*#__PURE__*/_jsx(Table.Cell,{children:result.backend_pair}),/*#__PURE__*/_jsx(Table.Cell,{children:result.backend_poolsize}),/*#__PURE__*/_jsx(Table.Cell,{children:result.backend_volume}),/*#__PURE__*/_jsx(Table.Cell,{children:result.backend_yield}),/*#__PURE__*/_jsx(Table.Cell,{children:result.pool_source}),/*#__PURE__*/_jsx(Table.Cell,{children:result.volatility}),/*#__PURE__*/_jsx(Table.Cell,{children:result.ROIestimate})]},index);});return/*#__PURE__*/_jsx(\"div\",{className:\"ui container\",children:/*#__PURE__*/_jsx(Segment,{children:/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(Table.Header,{children:/*#__PURE__*/_jsxs(Table.Row,{children:[/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"Ranking\"}),/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"Currency Pair\"}),/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"Pool Size\"}),/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"Pool Trading Volume\"}),/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"Interest Rate\"}),/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"Pool\"}),/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"Historical Volatility\"}),/*#__PURE__*/_jsx(Table.HeaderCell,{children:\"ROI Estimate\"})]})}),/*#__PURE__*/_jsx(Table.Body,{children:rows})]})})});}/*\n        if (index === 0) {\n            color='blue';\n        } else if (index === 1) {\n            color='blue';\n        } else if (index === 2) {\n            color='blue';\n        }\n\n             <Table.Cell>{ result.max_amount }</Table.Cell>\n                <Table.Cell>{ result.raw_yield }</Table.Cell>\n                <Table.Cell>{ result.normalized_yield }</Table.Cell>\n\n        */","map":{"version":3,"sources":["C:/Go/src/pusher/defi_aggregator/running-results-table/ui/src/ResultsTable2.js"],"names":["React","Table","Header","Segment","Label","ResultsTable2","currencyoutputtable","rows","map","result","index","color","backend_pair","backend_poolsize","backend_volume","backend_yield","pool_source","volatility","ROIestimate"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,MAAhB,CAAwBC,OAAxB,CAAiCC,KAAjC,KAA8C,mBAA9C,CAEA,cAAe,SAASC,CAAAA,aAAT,MAA8C,IAAtBC,CAAAA,mBAAsB,MAAtBA,mBAAsB,CACzD,GAAMC,CAAAA,IAAI,CAAGD,mBAAmB,CAACE,GAApB,CAAyB,SAACC,MAAD,CAASC,KAAT,CAAmB,CACrD,GAAIC,CAAAA,KAAK,CAAG,MAAZ,CAEA,mBACI,MAAC,KAAD,CAAO,GAAP,yBACI,KAAC,KAAD,CAAO,IAAP,wBACI,KAAC,KAAD,EAAO,MAAM,KAAb,CAAc,KAAK,CAAEA,KAArB,UAA8BD,KAAK,CAAG,CAAtC,EADJ,EADJ,cAII,KAAC,KAAD,CAAO,IAAP,WAAcD,MAAM,CAACG,YAArB,EAJJ,cAKI,KAAC,KAAD,CAAO,IAAP,WAAcH,MAAM,CAACI,gBAArB,EALJ,cAMI,KAAC,KAAD,CAAO,IAAP,WAAcJ,MAAM,CAACK,cAArB,EANJ,cAOI,KAAC,KAAD,CAAO,IAAP,WAAcL,MAAM,CAACM,aAArB,EAPJ,cAQI,KAAC,KAAD,CAAO,IAAP,WAAcN,MAAM,CAACO,WAArB,EARJ,cASI,KAAC,KAAD,CAAO,IAAP,WAAcP,MAAM,CAACQ,UAArB,EATJ,cAUI,KAAC,KAAD,CAAO,IAAP,WAAcR,MAAM,CAACS,WAArB,EAVJ,GAAiBR,KAAjB,CADJ,CAcH,CAjBY,CAAb,CAkBA,mBACI,YAAK,SAAS,CAAC,cAAf,uBACI,KAAC,OAAD,wBAEI,MAAC,KAAD,yBACI,KAAC,KAAD,CAAO,MAAP,wBACI,MAAC,KAAD,CAAO,GAAP,yBACI,KAAC,KAAD,CAAO,UAAP,sBADJ,cAEI,KAAC,KAAD,CAAO,UAAP,4BAFJ,cAGI,KAAC,KAAD,CAAO,UAAP,wBAHJ,cAII,KAAC,KAAD,CAAO,UAAP,kCAJJ,cAKI,KAAC,KAAD,CAAO,UAAP,4BALJ,cAMI,KAAC,KAAD,CAAO,UAAP,mBANJ,cAOI,KAAC,KAAD,CAAO,UAAP,oCAPJ,cAQI,KAAC,KAAD,CAAO,UAAP,2BARJ,GADJ,EADJ,cAaI,KAAC,KAAD,CAAO,IAAP,WACMH,IADN,EAbJ,GAFJ,EADJ,EADJ,CAwBH,CAGM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Table, Header, Segment, Label } from 'semantic-ui-react'\n\nexport default function ResultsTable2({currencyoutputtable}) {\n    const rows = currencyoutputtable.map(((result, index) => {\n        let color = 'blue';\n\n        return (\n            <Table.Row key={ index }>\n                <Table.Cell>\n                    <Label ribbon color={color}>{ index + 1 }</Label>\n                </Table.Cell>\n                <Table.Cell>{ result.backend_pair }</Table.Cell>\n                <Table.Cell>{ result.backend_poolsize }</Table.Cell>\n                <Table.Cell>{ result.backend_volume }</Table.Cell>\n                <Table.Cell>{ result.backend_yield }</Table.Cell>\n                <Table.Cell>{ result.pool_source }</Table.Cell>\n                <Table.Cell>{ result.volatility }</Table.Cell>\n                <Table.Cell>{ result.ROIestimate }</Table.Cell>\n            </Table.Row>\n        );\n    }));\n    return (\n        <div className=\"ui container\">\n            <Segment>\n\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Ranking</Table.HeaderCell>\n                            <Table.HeaderCell>Currency Pair</Table.HeaderCell>\n                            <Table.HeaderCell>Pool Size</Table.HeaderCell>\n                            <Table.HeaderCell>Pool Trading Volume</Table.HeaderCell>\n                            <Table.HeaderCell>Interest Rate</Table.HeaderCell>\n                            <Table.HeaderCell>Pool</Table.HeaderCell>\n                            <Table.HeaderCell>Historical Volatility</Table.HeaderCell>\n                            <Table.HeaderCell>ROI Estimate</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        { rows }\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </div>\n    );\n}\n\n\n       /*\n        if (index === 0) {\n            color='blue';\n        } else if (index === 1) {\n            color='blue';\n        } else if (index === 2) {\n            color='blue';\n        }\n\n             <Table.Cell>{ result.max_amount }</Table.Cell>\n                <Table.Cell>{ result.raw_yield }</Table.Cell>\n                <Table.Cell>{ result.normalized_yield }</Table.Cell>\n\n        */"]},"metadata":{},"sourceType":"module"}