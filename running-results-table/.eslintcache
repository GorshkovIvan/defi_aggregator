[{"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\index.js":"1","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\App.js":"2","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\reportWebVitals.js":"3","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\LogoBox.js":"4","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\Slider.js":"5","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\TextBox.js":"6","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\ConnectedResultsTable.js":"7","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\NewResultsForm.js":"8","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\RankedCurrenciesTable.js":"9","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\ResultsTable.js":"10","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\ResultsTable2.js":"11"},{"size":540,"mtime":1614585935461,"results":"12","hashOfConfig":"13"},{"size":1209,"mtime":1615101812510,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1613807584000,"results":"15","hashOfConfig":"13"},{"size":368,"mtime":1615029676490,"results":"16","hashOfConfig":"13"},{"size":3167,"mtime":1615101812515,"results":"17","hashOfConfig":"13"},{"size":339,"mtime":1614585935453,"results":"18","hashOfConfig":"13"},{"size":791,"mtime":1613807584000,"results":"19","hashOfConfig":"13"},{"size":3041,"mtime":1615035428598,"results":"20","hashOfConfig":"13"},{"size":827,"mtime":1613807584000,"results":"21","hashOfConfig":"13"},{"size":2013,"mtime":1615033227306,"results":"22","hashOfConfig":"13"},{"size":2375,"mtime":1615029060737,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fdj9hw",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\index.js",[],["52","53"],"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\App.js",["54"],"import logo from './eth.png';\r\n\r\nimport React, { Component } from 'react';\r\nimport ConnectedResultsTable from './ConnectedResultsTable';\r\nimport NewResultsForm from './NewResultsForm';\r\nimport RankedCurrenciesTable from './RankedCurrenciesTable';\r\nimport './App.css';\r\n\r\nimport LogoBox from './LogoBox.js'\r\nimport TextBox from './TextBox.js'\r\nimport Slider from './Slider.js'\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n    <div className=\"App\">\r\n\r\n<div className =\"TopTable\">\r\n      <TextBox></TextBox>\r\n      <LogoBox></LogoBox>\r\n      <h5 align=\"center\"> The place to find optimal yield for your cryptocurrency portfolio </h5>\r\n    </div>   \r\n    <div className =\"ui container\"><h3> Best cryptocurrencies to provide liquidity on are: </h3> </div>\r\n    <RankedCurrenciesTable />\r\n        <div className =\"MiddleDivider\"> </div>\r\n        <div className =\"App3\"> </div>\r\n        <div className =\"ui container\"><h3>Optimal portfolio is:</h3></div>\r\n        <ConnectedResultsTable />\r\n        <NewResultsForm />\r\n        <Slider />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n\r\n\r\n<div className =\"Table1Header\"><h3> Best cryptocurrencies to provide liquidity on are: </h3> </div>","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\reportWebVitals.js",[],"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\LogoBox.js",["55"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport logo from './eth.png';\r\n\r\nclass LogoBox extends React.Component {\r\n    render() {\r\n      return <div className=\"Applogo\"> <img src={logo} width=\"2%\"/> </div>;\r\n    }\r\n  }\r\n\r\n  ReactDOM.render(<LogoBox />, document.getElementById('root') || document.createElement('div'));\r\n  export default LogoBox;","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\Slider.js",["56"],"import React from 'react';\r\nimport { Form, Header, Segment, Button } from 'semantic-ui-react'\r\nimport styled from 'styled-components';\r\n\r\n/*\r\nconst sliderThumbStyles = (props) => (`\r\n  width: 25px;\r\n  height: 25px;\r\n  background: ${props.color};\r\n  cursor: pointer;\r\n  outline: 5px solid #333;\r\n  opacity: ${props.opacity};\r\n  -webkit-transition: .2s;\r\n  transition: opacity .2s;\r\n`);\r\n\r\nconst Styles = styled.div`\r\n  display: flex;\r\n  color: #888;\r\n  margin-top: 2rem;\r\n  margin-bottom: 2rem;\r\n  .value {\r\n    flex: 1;\r\n    font-size: 2rem;\r\n  }\r\n  .slider {\r\n    flex: 6;\r\n    -webkit-appearance: none;\r\n    width: 50%;\r\n    height: 10px;\r\n    border-radius: 5px;\r\n    background: #efefef;  \r\n    outline: none;\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n      ${props => sliderThumbStyles(props)}\r\n    }\r\n    &::-moz-range-thumb {\r\n      ${props => sliderThumbStyles(props)}\r\n    }\r\n  }\r\n`;*/\r\n\r\nconst sliderThumbStyles = (props) => (`\r\n  width: 15px;\r\n  height: 15px;\r\n  background: ${props.color};\r\n  cursor: pointer;\r\n  outline: 5px solid #333;\r\n  opacity: ${props.opacity};\r\n  -webkit-transition: .2s;\r\n  transition: opacity .2s;\r\n`);\r\n\r\nconst Styles = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: #888;\r\n  margin-top: 2rem;\r\n  margin-bottom: 2rem;\r\n  padding-bottom: 2rem;\r\n  .value {\r\n    flex: 1;\r\n    font-size: 2rem;\r\n  }\r\n  .slider {\r\n    flex: 6;\r\n    -webkit-appearance: none;\r\n    width: 75%; \r\n    margin-right: 15px;\r\n    height: 8px;\r\n    border-radius: 10px;\r\n    background: #efefef;\r\n    outline: 1px ridge rgba(128,128,128);\r\n    &::-webkit-slider-thumb {\r\n      -webkit-appearance: none;\r\n      appearance: none;\r\n      ${props => sliderThumbStyles(props)}\r\n    }\r\n    &::-moz-range-thumb {\r\n      ${props => sliderThumbStyles(props)}\r\n    }\r\n  }\r\n`;\r\n\r\nexport default class Slider2 extends React.Component {\r\n    state = {\r\n        risk_setting: ''\r\n    };\r\n        \r\n  handleOnChange = (e) => this.setState({ risk_setting: e.target.value });\r\n \r\n    onSubmit = this._onSubmit.bind(this);\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui container\">\r\n              <Form onSubmit={this.onSubmit}>\r\n              <Header>Please enter your risk tolerance (1 to 10):</Header>\r\n                  <Styles opacity={this.state.risk_setting > 10 ? (this.state.risk_setting / 10) : .1} color={this.props.color}>\r\n                    <input type=\"range\" min={0} max={10} value={this.state.risk_setting} className=\"slider\" onChange={this.handleOnChange}/> \r\n                    <Button type='submit'>Submit</Button>                 \r\n                  </Styles>                \r\n\r\n              </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    _onSubmit() {\r\n        const payload = {\r\n            risk_setting: parseFloat(this.state.risk_setting)\r\n        };\r\n        fetch('http://localhost:8080/results2', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(payload)\r\n        });\r\n        this.setState({\r\n          risk_setting: ''\r\n        });\r\n    }\r\n}","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\TextBox.js",[],"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\ConnectedResultsTable.js",[],"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\NewResultsForm.js",[],"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\RankedCurrenciesTable.js",[],"C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\ResultsTable.js",["57"],"import React from 'react';\nimport { Table, Header, Segment, Label } from 'semantic-ui-react'\nexport default function ResultsTable({results}) {\n    const rows = results.map(((result, index) => {\n        let color;\n        if (index === 0) {\n            color='yellow';\n        } else if (index === 1) {\n            color='grey';\n        } else if (index === 2) {\n            color='orange';\n        }\n        return (\n            <Table.Row key={ index }>\n                <Table.Cell>\n                    <Label ribbon color={color}>{ index + 1 }</Label>\n                </Table.Cell>\n                <Table.Cell>{ result.tokenorpair }</Table.Cell>\n                <Table.Cell>{ result.pool}</Table.Cell>\n                <Table.Cell>{ result.amount }</Table.Cell>\n                <Table.Cell>{ result.percentageofportfolio }</Table.Cell>\n                <Table.Cell>{ result.roi_estimate }</Table.Cell>\n                <Table.Cell>{ result.risk_setting }</Table.Cell>\n            </Table.Row>\n        );\n    }));\n    return (\n        <div className=\"ui container\">\n            <Segment>\n\n                <Table striped>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Ranking</Table.HeaderCell>\n                            <Table.HeaderCell>Token/Pair</Table.HeaderCell>\n                            <Table.HeaderCell>Pool</Table.HeaderCell>\n                            <Table.HeaderCell>Amount</Table.HeaderCell>\n                            <Table.HeaderCell>% Portfolio</Table.HeaderCell>\n                            <Table.HeaderCell>ROI Estimate</Table.HeaderCell>\n                            <Table.HeaderCell>Risk setting</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        { rows }\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </div>\n    );\n}\n\n//                 <Header>Optimal Portfolio</Header>","C:\\Go\\src\\pusher\\defi_aggregator\\running-results-table\\src\\ResultsTable2.js",["58"],"import React from 'react';\nimport { Table, Header, Segment, Label } from 'semantic-ui-react'\n\nexport default function ResultsTable2({currencyoutputtable}) {\n    const rows = currencyoutputtable.map(((result, index) => {\n        let color = 'blue';\n\n        return (\n            <Table.Row key={ index }>\n                <Table.Cell>\n                    <Label ribbon color={color}>{ index + 1 }</Label>\n                </Table.Cell>\n                <Table.Cell>{ result.backend_pair }</Table.Cell>\n                <Table.Cell>{ result.backend_poolsize }</Table.Cell>\n                <Table.Cell>{ result.backend_volume }</Table.Cell>\n                <Table.Cell>{ result.backend_yield }</Table.Cell>\n                <Table.Cell>{ result.pool_source }</Table.Cell>\n                <Table.Cell>{ result.volatility }</Table.Cell>\n                <Table.Cell>{ result.ROIestimate }</Table.Cell>\n            </Table.Row>\n        );\n    }));\n    return (\n        <div className=\"ui container\">\n            <Segment>\n\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Ranking</Table.HeaderCell>\n                            <Table.HeaderCell>Currency Pair</Table.HeaderCell>\n                            <Table.HeaderCell>Pool Size</Table.HeaderCell>\n                            <Table.HeaderCell>Pool Trading Volume</Table.HeaderCell>\n                            <Table.HeaderCell>Interest Rate</Table.HeaderCell>\n                            <Table.HeaderCell>Pool</Table.HeaderCell>\n                            <Table.HeaderCell>Historical Volatility</Table.HeaderCell>\n                            <Table.HeaderCell>ROI Estimate</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        { rows }\n                    </Table.Body>\n                </Table>\n            </Segment>\n        </div>\n    );\n}\n\n\n       /*\n        if (index === 0) {\n            color='blue';\n        } else if (index === 1) {\n            color='blue';\n        } else if (index === 2) {\n            color='blue';\n        }\n\n             <Table.Cell>{ result.max_amount }</Table.Cell>\n                <Table.Cell>{ result.raw_yield }</Table.Cell>\n                <Table.Cell>{ result.normalized_yield }</Table.Cell>\n\n        */",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":7,"column":40,"nodeType":"69","endLine":7,"endColumn":68},{"ruleId":"63","severity":1,"message":"70","line":2,"column":24,"nodeType":"65","messageId":"66","endLine":2,"endColumn":31},{"ruleId":"63","severity":1,"message":"71","line":2,"column":17,"nodeType":"65","messageId":"66","endLine":2,"endColumn":23},{"ruleId":"63","severity":1,"message":"71","line":2,"column":17,"nodeType":"65","messageId":"66","endLine":2,"endColumn":23},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Segment' is defined but never used.","'Header' is defined but never used.","no-global-assign","no-unsafe-negation"]