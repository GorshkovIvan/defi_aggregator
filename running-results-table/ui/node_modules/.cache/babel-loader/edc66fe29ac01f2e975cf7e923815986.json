{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Go\\\\src\\\\pusher\\\\running-results-table\\\\ui\\\\src\\\\NewResultsForm.js\";\nimport React from 'react';\nimport { Form, Header, Segment, Button } from 'semantic-ui-react'; // does not do any validation\n\nexport default class NewResultsForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cryptocurrency_pair: '',\n      amount: ''\n    };\n    this.onChangeCryptocurrency_pair = this._onChangeCryptocurrency_pair.bind(this);\n    this.onChangeAmount = this._onChangeAmount.bind(this);\n    this.onSubmit = this._onSubmit.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui container\",\n      children: /*#__PURE__*/_jsxDEV(Segment, {\n        vertical: true,\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          children: \"Please Enter Your Cryptocurrency Portfolio to Optimise\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: this.onSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Cryptocurrency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"E.g. ETH\",\n              value: this.state.cryptocurrency_pair,\n              onChange: this.onChangeCryptocurrency_pair\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"999.99\",\n              value: this.state.amount,\n              onChange: this.onChangeAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this);\n  }\n\n  _onChangeName(e) {\n    this.setState({\n      cryptocurrency_pair: e.target.value\n    });\n  }\n\n  _onChangeTime(e) {\n    this.setState({\n      time: e.target.value\n    });\n  }\n\n  _onSubmit() {\n    const payload = {\n      name: this.state.cryptocurrency_pair,\n      time: parseFloat(this.state.time)\n    };\n    fetch('http://localhost:8080/results', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    this.setState({\n      cryptocurrency_pair: '',\n      time: ''\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Go/src/pusher/running-results-table/ui/src/NewResultsForm.js"],"names":["React","Form","Header","Segment","Button","NewResultsForm","Component","state","cryptocurrency_pair","amount","onChangeCryptocurrency_pair","_onChangeCryptocurrency_pair","bind","onChangeAmount","_onChangeAmount","onSubmit","_onSubmit","render","_onChangeName","e","setState","target","value","_onChangeTime","time","payload","name","parseFloat","fetch","method","headers","body","JSON","stringify"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,MAAhC,QAA8C,mBAA9C,C,CAEA;;AACA,eAAe,MAAMC,cAAN,SAA6BL,KAAK,CAACM,SAAnC,CAA6C;AAAA;AAAA;AAAA,SACxDC,KADwD,GAChD;AACJC,MAAAA,mBAAmB,EAAE,EADjB;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KADgD;AAAA,SAKxDC,2BALwD,GAK1B,KAAKC,4BAAL,CAAkCC,IAAlC,CAAuC,IAAvC,CAL0B;AAAA,SAMxDC,cANwD,GAMvC,KAAKC,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CANuC;AAAA,SAOxDG,QAPwD,GAO7C,KAAKC,SAAL,CAAeJ,IAAf,CAAoB,IAApB,CAP6C;AAAA;;AAQxDK,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI,QAAC,OAAD;AAAS,QAAA,QAAQ,MAAjB;AAAA,gCACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAE,KAAKF,QAArB;AAAA,kCACI,QAAC,IAAD,CAAM,KAAN;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,WAAW,EAAC,UAAnB;AAA8B,cAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,mBAAhD;AAAqE,cAAA,QAAQ,EAAE,KAAKE;AAApF;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI,QAAC,IAAD,CAAM,KAAN;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAO,cAAA,WAAW,EAAC,QAAnB;AAA4B,cAAA,KAAK,EAAE,KAAKH,KAAL,CAAWE,MAA9C;AAAsD,cAAA,QAAQ,EAAE,KAAKI;AAArE;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eASI,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAkBH;;AACDK,EAAAA,aAAa,CAACC,CAAD,EAAI;AACb,SAAKC,QAAL,CAAc;AACVZ,MAAAA,mBAAmB,EAAEW,CAAC,CAACE,MAAF,CAASC;AADpB,KAAd;AAGH;;AACDC,EAAAA,aAAa,CAACJ,CAAD,EAAI;AACb,SAAKC,QAAL,CAAc;AACVI,MAAAA,IAAI,EAAEL,CAAC,CAACE,MAAF,CAASC;AADL,KAAd;AAGH;;AACDN,EAAAA,SAAS,GAAG;AACR,UAAMS,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAE,KAAKnB,KAAL,CAAWC,mBADL;AAEZgB,MAAAA,IAAI,EAAEG,UAAU,CAAC,KAAKpB,KAAL,CAAWiB,IAAZ;AAFJ,KAAhB;AAIAI,IAAAA,KAAK,CAAC,+BAAD,EAAkC;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF0B;AAKnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,OAAf;AAL6B,KAAlC,CAAL;AAOA,SAAKL,QAAL,CAAc;AACVZ,MAAAA,mBAAmB,EAAE,EADX;AAEVgB,MAAAA,IAAI,EAAE;AAFI,KAAd;AAIH;;AAtDuD","sourcesContent":["import React from 'react';\nimport { Form, Header, Segment, Button } from 'semantic-ui-react'\n\n// does not do any validation\nexport default class NewResultsForm extends React.Component {\n    state = {\n        cryptocurrency_pair: '',\n        amount: ''\n    };\n    onChangeCryptocurrency_pair = this._onChangeCryptocurrency_pair.bind(this);\n    onChangeAmount = this._onChangeAmount.bind(this);\n    onSubmit = this._onSubmit.bind(this);\n    render() {\n        return (\n            <div className=\"ui container\">\n                <Segment vertical>\n                    <Header>Please Enter Your Cryptocurrency Portfolio to Optimise</Header>\n                    <Form onSubmit={this.onSubmit}>\n                        <Form.Field>\n                            <label>Cryptocurrency</label>\n                            <input placeholder='E.g. ETH' value={this.state.cryptocurrency_pair} onChange={this.onChangeCryptocurrency_pair} />\n                        </Form.Field>\n                        <Form.Field>\n                            <label>Amount</label>\n                            <input placeholder='999.99' value={this.state.amount} onChange={this.onChangeAmount} />\n                        </Form.Field>\n                        <Button type='submit'>Submit</Button>\n                    </Form>\n                </Segment>\n            </div>\n        );\n    }\n    _onChangeName(e) {\n        this.setState({\n            cryptocurrency_pair: e.target.value\n        });\n    }\n    _onChangeTime(e) {\n        this.setState({\n            time: e.target.value\n        });\n    }\n    _onSubmit() {\n        const payload = {\n            name: this.state.cryptocurrency_pair,\n            time: parseFloat(this.state.time)\n        };\n        fetch('http://localhost:8080/results', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n        this.setState({\n            cryptocurrency_pair: '',\n            time: ''\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}