NEXT STEPS:
Historical Trading volume data (ex Uniswap)		- need for accurate ROI
Add check in data combination to ensure dates consistent across 2 datasets
Why is VolumeUSD so different from actual daily pair volume?
Why so many zeroes in historical volume

OptimisePortfolio 			- finalize - Ratios + with Swaps
Hist price return estimator func
Get Reward Mechanism			- need to figure out what it is for pools other than Uniswap

Add logo to front end - NFT!!
Format numbers on front end
Add popup boxes explaining what each window does
Contact form

Curve data pulling implementation 
Get gas fees


HOW TO COMPILE
move everything from ui into main folder - in Defi Aggregator
run 'npm run build' from cmd
compile running-results-table into an executable
set GOOS=linux 
go build
upload everything to cpanel - 
on namecheap console, run: PORT=1234 ./running-results-table


COMPLETE
Add dark lite mode to front end
Impermanent loss estimator function
1 year old data - fixed with desc
Add not investment advice disclaimer
ETH volatility is 420
WBTC/WETH volatility
WETH/USDT volatility
WBTC/DAI volatility
Fix USDC/WETH volatility calc - currently outputs zero
Make sure no Inf/NaN in calcs
Connect Database
Finish future volume estimator function - fix errors
Implement calculateROI properly
Fix Uniswap downloader for historical volumes
UI + populate risk from UI		- bring to match our report 1
JS + Golang Tests			- complete?
isHistDataAlreadyDownloaded 		- done (Check for dates can add later)
calculatehistoricalvolatility 		- Need to check if gives right output
NewHistoricalCurrencyDataFromRaw 	- done
retrieveDataForTokensFromDatabase 	- done
Aave data pulling implementation	- check to confirm j loop in tokenqueue is 1 element
Create risk var in database				- done 
WETH Data not downloading correctly 	- done
Why runs 3x?							- done
Implement MongoDB historical interface functions
Add pair-uniswap id mapping to database - instead of 1000 records

func isHistDataAlreadyDownloaded(token string, database *Database) bool {
func retrieveDataForTokensFromDatabase(token0 string, token1 string, database *Database) HistoricalCurrencyData {
func (database *Database) RankBestCurrencies() {
database.historicalcurrencydata = append(database.historicalcurrencydata, Histrecord)
len(database.historicalcurrencydata)

i.e. we need to get the database pointer out - and have the ability to retrieve and append structs from/to actual database
func isHistDataAlreadyDownloaded(token string) bool - which will query the historical database and tell if data is present for the token - MODIFICATION OF EXISTING
func retrieveDataForTokensFromDatabase(token0 string, token1 string) HistoricalCurrencyData - gets the pair price in form of a HistoricalCurrencyData struct - MODIFICATION OF EXISTING
func appendDataForTokensFromDatabase(HistoricalCurrencyData) - appends a record (raw form is HistoricalCurrencyData) to the actual database - NEW
func getLenPrices(string token) - gets number of non-empty price records in database for given token - NEW 
func getLenDates(string token) - gets number of non-empty date records in database for given token - NEW
func getLen() - gets number of tokens with historical records in database - NEW



TO BUILD AND RUN
move everything from ui into main folder (cut + paste all contents of UI into main running-results-table directory)
compile react app with 'npm run build' from cmd
set GOOS=linux - to compile the golang for web server
go build - to compile running-results-table into a linux executable
Upload both the contents of build folder (it is created by npm build) and the go executable to cpanel
run from terminal on cpanel: PORT=1234 ./running-results-table